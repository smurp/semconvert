#!/usr/bin/env node

const { program } = require('commander');
const fs = require('fs');
const mime = require('mime');
const { Parser, Writer } = require('n3');
const path = require('path');

/*
var ext2type = {
  'nq': 'application/n-quads',
  'nt': 'application/n-triples',
  'ttl': 'application/turtle',
  'owl': 'application/rdf+xml',
  'rdf': 'application/rdf+xml',
  'trig': 'application/trig',
  'n3': 'text/n3' // https://www.w3.org/TeamSubmission/n3/
};

const type2ext = {
  'N-Triples': 'nt',
  'application/n-quads': 'nq',
  'application/n-triples': 'nt',
  'application/quads': 'nq',
  'application/rdf+xml': 'rdf',
  'application/triples': 'nt',
  'application/turtle': 'ttl',
  'application/x-turtle': 'ttl',
  'text/n3': 'n3'
};
*/

function ensure_mimetypes(map) {
  for (var type in map) {
    var exts = map[type];
    if (! mime.extensions[type]) {
      mime.define(map);
    }
  }
}
ensure_mimetypes({'application/n-quads':['nq'],
                  'application/n-triples':['nt'],
                  'application/trig':['trig']
                 })

function semconvert(infile, outfile, options) {
  const infType = mime.lookup(infile);
  const outType = mime.lookup(outfile);
  const inputFormat = options.informat ||
        ((infile!='-') ? infType : 'text/turtle');
  const outputFormat = options.outformat ||
        ((outfile!='-') ? outType : 'application/n-triples');
  const {verbose, noprefix} = options;

  // Ensure infile exists
  if (!fs.existsSync(infile)) {
    console.error(`Input file "${infile}" not found.`);
    process.exit(1);
  }

  // Read the input file
  const inputData = fs.readFileSync(infile, 'utf8');

  // Parse the input data
  const parser = new Parser({ format: inputFormat });
  const writer = new Writer({ format: outputFormat });
  const quads = [];
  const prefs = [];
  const quad_handler = () => {};
  const pref_handler = () => {};

  parser.parse(inputData, (error, quad, prefixes) => {
    if (prefixes) {
      if (!noprefix) {
        writer.addPrefixes(prefixes);
      }
      pref_handler(prefixes);
      prefs.push(prefixes); // after pref_handle so it can detect new
      verbose && console.error({prefixes});
    }
    if (quad) {
      quad_handler(quad);
      quads.push(quad); // after quad_handler so new ones can be noticed
      verbose && console.error({quad});
    } else if (error) {
      console.error('Error parsing input data:', error);
      process.exit(1);
    } else {
      // End of input; write the output
      writer.addQuads(quads);
      writer.end((error, result) => {
        if (error) {
          console.error('Error writing output data:', error);
          process.exit(1);
        } else {
          if (outfile=='-') {
            console.log(result);
          } else {
            fs.writeFileSync(outfile, result);
          }
        }
        verbose && console.error({
          options,
          infile, infType, inputFormat,
          outfile, outType, outputFormat});
      });
    }
  });
}



program
  .name('semconvert')
  .description(
    'Converts between various RDF and RDF-star syntaxes such as nq|nt|rdf|trig|ttl')
  .argument('<infile>', 'the input file')
  .argument('<outfile>', 'the output file')
  .option('-o, --outformat <OF>', 'the output format')
  .option('-i, --informat <IF>', 'the input format')
  .option('-v, --verbose', 'show details')
  .option('-n, --noprefix', 'do not output prefixes')
  .action(semconvert);

program.parse();
