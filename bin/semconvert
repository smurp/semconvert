#!/usr/bin/env node

//const { program } = require('commander');
//const fs = require('fs');
//const path = require('path');
//const { semconvert } = require('../lib/semconvert');
import { program } from 'commander';
import * as fs from 'node:fs';
import * as path from 'node:path';
import { semconvert } from '../lib/semconvert.js';


// https://github.com/broofa/mime/blob/main/README.md#custom-mime-instances
//import mime from 'mime'; // cannot be extended, so...
import { Mime } from 'mime/lite';
import standardTypes from 'mime/types/standard.js';
import otherTypes from 'mime/types/other.js';
const mime = new Mime(standardTypes, otherTypes);

function ensure_mimetypes(map) {
  for (var type in map) {
    var exts = map[type];
    if (! mime.getExtension(type)) {
      // console.log({type, map});
      mime.define(map, /*force*/true );
    }
  }
}

ensure_mimetypes({'application/n-quads':['nq'],
                  'application/n-triples':['nt'],
                  'application/trig':['trig'],
                  'application/trig+star':['trigstar','trig+star'],
                  'application/rdf+star': ['rdfstar','rdf+star'],
                  'application/ttl+star': ['ttlstar','ttl+star'],
                  'application/n-quads+star': ['nqstar','nq+star'],
                  'text/n3': ['n3'],
                  'application/vnd.org-mode': ['org'],
                  'application/json': ['json'],
                  'text/csv': ['csv'],
                  'text/tab-separated-values': ['tsv'], // also 'tab'
                  'text/vnd.graphviz': ['dot']
                 });


function semconvert_cli(infile, outfile, options) {
  // parameter > extension > default
  const {verbose, noprefix, informat, outformat, dryrun, stripUrls} = options;
  const inputFormat = (informat && mime.getType(informat))
    || (infile!='-' && mime.getType(infile))
    || 'text/turtlestar'; // default inputFormat
  const outputFormat = (outformat && mime.getType(outformat))
    || (outfile!='-' && mime.getType(outfile))
    || 'text/turtle'; // default outputFormat

  (dryrun || verbose) && console.error({
    options,
    infile, informat, inputFormat,
    outfile, outformat, outputFormat});

  // Ensure infile exists (if it's not stdin)
  if (infile !== '-' && !fs.existsSync(infile)) {
    console.error(`Input file "${infile}" not found.`);
    process.exit(1);
  }

  if (dryrun) process.exit(1); // bail before acting

  // Read the input data
  let inputData;
  if (infile === '-') {
    // Read input data from stdin
    const chunks = [];
    process.stdin.on('data', (chunk) => chunks.push(chunk));
    process.stdin.on('end', () => {
      inputData = Buffer.concat(chunks).toString('utf8');
      processData(inputData);
    });
  } else {
    // Read input data from file
    inputData = fs.readFileSync(infile, 'utf8');
    processData(inputData);
  }

  function processData(inputData) {
    const callback = (error, result) => {
      if (error) {
        console.error('Error writing output data:', error);
        process.exit(1);
      } else {
        if (outfile === '-') {
          console.log(result);
        } else {
          fs.writeFileSync(outfile, result);
        }
      }
    };

    semconvert(inputData, callback,
      Object.assign(options, { inputFormat, outputFormat })
    );
  }
}

program
  .name('semconvert')
  .description(
    ['Converts between various RDF and RDF-star syntaxes such as'
     ,'  nq|nt|rdf|trig|ttl|ttl+star|trig+star|rdf+star'
     ,'and can also convert to'
     ,'  application/vnd.org-mode (.org)'
     ,'  application/json (.json)'
     ,'  text/csv (.csv)'
     ,'  text/tab-separated-values (.tsv)'
     ,'  text/vnd.graphviz (.dot)'
    ].join('\n'))
  .argument('<infile>', 'the input file (or - for stdin)')
  .argument('<outfile>', 'the output file (or - for stdout)')
  .option('-o, --outformat <OF>', 'the output format, default text/turtle')
  .option('-i, --informat <IF>', 'the input format, default text/turtlestar')
  .option('-v, --verbose', 'show details')
  .option('-n, --noprefix', 'do not output prefixes')
  .option('-d, --dryrun', 'show what will happen but do nothing')
  .option('-s, --stripUrls',
          'strip http://x.co/wtf#eg http://x.co/a/eg http://eg/ to eg')
  .option('--ds, --denySubjLike <RegEx...>', 'ignore subjects like')
  .option('--ps, --passSubjLike <RegEx...>', 'permit subjects like')
  .option('--dp, --denyPredLike <RegEx...>', 'ignore predicates like')
  .option('--pp, --passPredLike <RegEx...>', 'permit predicates like')
  .action(semconvert_cli)
  .addHelpText('after', `
Examples:
     # input.ttl
     @prefix : <http://example.com/a/path/> .
     :S1 Pred1 1.0; :Pred2 2.0; :Pred3 "one" .
     :S2 Pred1 3.0; :Pred2 4.0; :Pred3 "two" .
     :S3 Pred1 5.0; :Pred2 6.0; :Pred3 "tre" .

  semconvert input.trig output.nq # nothing to stdout
    trivial conversion from TRIG to N-Quads

  semconvert --denySubjLike Mo 'C.*rly' -- Buddies.ttl noMoOrCurly.ttl
    convert Turtle to Turtle but skip subjects matching Mo or C.*rly
    guard special characters with ''
    use -- to force the end of option processing

  semconvert --stripUrls --outformat=org  input.ttl -
       |  |Pred1|Pred2|Pred3|
       |S1|  1.0|  2.0|  one|
       |S2|  3.0|  4.0|  two|
       |S3|  5.0|  6.0|  tre|
    generate Org-Mode table output, striping url ugliness

  semconvert --informat=ttl+star --outformat=trig  input.ttl -
    if the outfile is - (ie stdout) then explicit --outformat
    force the --informat if there is RDFstar content

  semconvert --denySubjLike S2 --denyPredLike Pred1 Pred3  \\
             --outformat=org --stripUrls input.ttl -
       |  |Pred2|
       |S1|  2.0|
       |S3|  6.0|
    Subj or Pred can be passed or denied by space-delimited RegExes

  semconvert --ps S2 --pp Pred1 Pred3 -oorg -s - - < input.ttl
       |  |Pred1|Pred3|
       |S2|  3.0|  two|
    Same as previous example but abbreviated and pass/deny inverted!
    Also read from stdin and, in this case, rely on the informat default.

  semconvert prov-o-ex2.ttl prov-o-ex2.dot && \
         dot -Tpng prov-o-ex2.dot > prov-o-ex2.png
    Generate GraphViz DOT output (and then render it)
`);

program.parse();

